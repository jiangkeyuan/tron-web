{"version":3,"file":"index.cd22e07c.js","sources":["../../node_modules/element-plus/es/hooks/use-id/index.mjs"],"sourcesContent":["import { getCurrentInstance, inject, computed, unref } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { useGetDerivedNamespace } from '../use-namespace/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nconst ID_INJECTION_KEY = Symbol(\"elIdInjection\");\nconst useIdInjection = () => {\n  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;\n};\nconst useId = (deterministicId) => {\n  const idInjection = useIdInjection();\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`);\n  }\n  const namespace = useGetDerivedNamespace();\n  const idRef = computed(() => unref(deterministicId) || `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`);\n  return idRef;\n};\n\nexport { ID_INJECTION_KEY, useId, useIdInjection };\n//# sourceMappingURL=index.mjs.map\n"],"names":["defaultIdInjection","ID_INJECTION_KEY","useIdInjection","getCurrentInstance","inject","useId","deterministicId","idInjection","namespace","useGetDerivedNamespace","computed","unref"],"mappings":"gEAMA,MAAMA,EAAqB,CACzB,OAAQ,KAAK,MAAM,KAAK,OAAM,EAAK,GAAG,EACtC,QAAS,CACX,EACMC,EAAmB,OAAO,eAAe,EACzCC,EAAiB,IACdC,EAAoB,EAAGC,EAAOH,EAAkBD,CAAkB,EAAIA,EAEzEK,EAASC,GAAoB,CACjC,MAAMC,EAAcL,IAQdM,EAAYC,IAElB,OADcC,EAAS,IAAMC,EAAML,CAAe,GAAK,GAAGE,EAAU,YAAYD,EAAY,UAAUA,EAAY,WAAW,CAE/H"}